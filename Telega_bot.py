import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open('TelegramBotRecipe.json', 'r') as f:
    config = json.load(f)

API_URL = config["FAST_API_URL"]
API_URL_ALCH = config["API_URL_ALCH"]
TOKEN = config["TOKEN_BOT"]
API_KEY = config["API_KEY_PROM"]  # üîë —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á API
API_KEY_ALCH = config["API_KEY_TEST"]
print(API_KEY)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RecipeForm(StatesGroup):
    title = State()
    description = State()
    cuisine_type = State()
    meal_type = State()
    prep_time = State()
    ingredients = State()
class IngredientSearch(StatesGroup):
    input_ingredient = State()
    choose_recipe = State()



main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(text="üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"),
            types.KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç")
        ],
        [
            types.KeyboardButton(text="üßÇ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")  # –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ]
    ],
    resize_keyboard=True
)


CUISINE_OPTIONS = ["–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–†—É—Å—Å–∫–∞—è", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "–Ø–ø–æ–Ω—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–î—Ä—É–≥–æ–µ"]
MEAL_OPTIONS = ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–ü–µ—Ä–µ–∫—É—Å", "–î—Ä—É–≥–æ–µ"]



@dp.message(Command("start"), StateFilter("*"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—Éüëá",
        reply_markup=main_menu
    )


@dp.message(Command("help"), StateFilter("*"))
async def cmd_help(message: types.Message, state: FSMContext):
    help_text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
        "üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚Äî –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–≥–∞–º\n"
        "üîç 1111–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç ‚Äî –∏—â–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É."
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_menu)


@dp.message(Command("find"), StateFilter("*"))
async def cmd_find(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state("search_title")


@dp.message(F.text.lower() == "üç≥ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", StateFilter("*"))
async def create_recipe(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RecipeForm.title)


@dp.message(F.text.lower() == "üîç –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", StateFilter("*"))
async def find_recipe(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state("search_title")


# –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
@dp.message(StateFilter("search_title"))
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.strip()
    headers = {"X-API-Key": API_KEY}
    try:
        resp = requests.get(API_URL, params={"title": query}, headers=headers)
        resp.raise_for_status()
        recipes = resp.json()
        if not recipes:
            await message.answer("‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_menu)
        else:
            for r in recipes:
                ingredients = "\n".join(
                    [f"- {i['name']}: {i['quantity']}" for i in r.get("ingredients", [])]
                )
                text = (
                    f"üçΩÔ∏è <b>{r['title']}</b>\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {r.get('description', '–Ω–µ—Ç')}\n"
                    f"–¢–∏–ø –∫—É—Ö–Ω–∏: {r.get('cuisine_type', '–Ω–µ—Ç')}\n"
                    f"–ü—Ä–∏–µ–º –ø–∏—â–∏: {r.get('meal_type', '–Ω–µ—Ç')}\n"
                    f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {r.get('prep_time_minutes', '–Ω–µ—Ç')} –º–∏–Ω.\n"
                    f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}"
                )
                await message.answer(text, parse_mode="HTML")
    except requests.RequestException as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    await state.clear()


@dp.message(StateFilter(RecipeForm.title))
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
    await state.set_state(RecipeForm.description)


@dp.message(StateFilter(RecipeForm.description))
async def process_description(message: types.Message, state: FSMContext):
    desc = message.text if message.text.lower() != "–Ω–µ—Ç" else None
    await state.update_data(description=desc)

    cuisine_kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=c)] for c in CUISINE_OPTIONS],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:", reply_markup=cuisine_kb)
    await state.set_state(RecipeForm.cuisine_type)


@dp.message(StateFilter(RecipeForm.cuisine_type))
async def process_cuisine(message: types.Message, state: FSMContext):
    ctype = message.text if message.text != "–î—Ä—É–≥–æ–µ" else None
    await state.update_data(cuisine_type=ctype)

    meal_kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=m)] for m in MEAL_OPTIONS],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:", reply_markup=meal_kb)
    await state.set_state(RecipeForm.meal_type)


@dp.message(StateFilter(RecipeForm.meal_type))
async def process_meal_type(message: types.Message, state: FSMContext):
    mtype = message.text if message.text != "–î—Ä—É–≥–æ–µ" else None
    await state.update_data(meal_type=mtype)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ '–Ω–µ—Ç':", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RecipeForm.prep_time)


@dp.message(StateFilter(RecipeForm.prep_time))
async def process_prep_time(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        prep_time = None
    else:
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–Ω–µ—Ç':")
            return
        prep_time = int(message.text)
    await state.update_data(prep_time_minutes=prep_time)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–≥–æ—Ç–æ–≤–æ'."
    )
    await state.update_data(ingredients=[])
    await state.set_state(RecipeForm.ingredients)


@dp.message(StateFilter(RecipeForm.ingredients))
async def process_ingredients(message: types.Message, state: FSMContext):
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        if not data.get("ingredients"):
            await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.")
            return

        recipe_json = {
            "title": data["title"],
            "description": data.get("description"),
            "cuisine_type": data.get("cuisine_type"),
            "meal_type": data.get("meal_type"),
            "prep_time_minutes": data.get("prep_time_minutes"),
            "ingredients": data["ingredients"]
        }

        try:
            resp = requests.post(API_URL, json=recipe_json, headers={"X-API-Key": API_KEY})
            resp.raise_for_status()
            res_json = resp.json()
            await message.answer(
                f"‚úÖ –†–µ—Ü–µ–ø—Ç '{res_json.get('title')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=main_menu
            )
        except requests.RequestException as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", reply_markup=main_menu)

        await state.clear()
        return

    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n–ú—É–∫–∞ 200–≥"
        )
        return

    name = parts[0]
    quantity = parts[1]

    data = await state.get_data()
    ingredients = data.get("ingredients", [])
    ingredients.append({"name": name, "quantity": quantity})
    await state.update_data(ingredients=ingredients)

    done_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await message.answer(
        f"‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=done_keyboard
    )


@dp.message(F.text.lower() == "üßÇ –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É", StateFilter("*"))
async def search_by_ingredient_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:")
    await state.set_state(IngredientSearch.input_ingredient)


@dp.message(StateFilter(IngredientSearch.input_ingredient))
async def process_ingredient_input(message: types.Message, state: FSMContext):
    ingredient = message.text.strip()
    headers = {"X-API-Key": API_KEY_ALCH}
    try:
        resp = requests.get(f"{API_URL_ALCH}/recipes/search_by_ingredient", params={"ingredient": ingredient}, headers=headers)
        resp.raise_for_status()
        recipes = resp.json()

        if not recipes:
            await message.answer("‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ç–∞–∫–æ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É.", reply_markup=main_menu)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(recipes=recipes)

        # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text=r["title"])] for r in recipes],
            resize_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:", reply_markup=keyboard)
        await state.set_state(IngredientSearch.choose_recipe)

    except requests.RequestException as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}", reply_markup=main_menu)
        await state.clear()


@dp.message(StateFilter(IngredientSearch.choose_recipe))
async def show_selected_recipe(message: types.Message, state: FSMContext):
    selected_title = message.text.strip()

    try:
        response = requests.get(
            url=API_URL,
            headers={"X-API-Key": API_KEY},
            params={"title": selected_title}
        )
        response.raise_for_status()
        recipe = response.json()
        print(recipe)

        texts = []

        for r in recipe:
            ingredients = "\n".join(
                [f"- {i['name']}: {i['quantity']}" for i in r.get("ingredients", [])]
            )
            text = (
                f"üçΩÔ∏è <b>{r['title']}</b>\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {r.get('description', '–Ω–µ—Ç')}\n"
                f"–¢–∏–ø –∫—É—Ö–Ω–∏: {r.get('cuisine_type', '–Ω–µ—Ç')}\n"
                f"–ü—Ä–∏–µ–º –ø–∏—â–∏: {r.get('meal_type', '–Ω–µ—Ç')}\n"
                f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {r.get('prep_time_minutes', '–Ω–µ—Ç')} –º–∏–Ω.\n"
                f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}"
            )
            texts.append(text)

        await message.answer("\n\n".join(texts), parse_mode="HTML", reply_markup=main_menu)
        await state.clear()


    except requests.RequestException as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", reply_markup=main_menu)
        await state.clear()






@dp.message()
async def fallback_handler(message: types.Message, state: FSMContext):
    await message.answer(
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ /help.",
        reply_markup=main_menu
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
